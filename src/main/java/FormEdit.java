import javax.swing.JOptionPane;

public class FormEdit extends javax.swing.JFrame {
    
    // Creates new singleton form 'FormEdit'
    private static FormEdit instance;
    private FormEdit() {
        initComponents();
        setTitle("Editar computador");
        setLocationRelativeTo(null);
        populate();
        checkboxGuiHandleling();
    }
    public static FormEdit instance() {
        if (instance == null){
            instance = new FormEdit();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitleEssencial = new javax.swing.JLabel();
        jLabelTitleCpu = new javax.swing.JLabel();
        jLabelTitleGpu = new javax.swing.JLabel();
        jLabelTitleType = new javax.swing.JLabel();
        jLabelTitleOptionals = new javax.swing.JLabel();
        jLabelTitlePeripherals = new javax.swing.JLabel();
        jLabelTitleDisplay = new javax.swing.JLabel();
        jLabelTitleCamera = new javax.swing.JLabel();
        jLabelTitleRegister = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldStorage = new javax.swing.JTextField();
        jTextFieldMemory = new javax.swing.JTextField();
        jLabelName = new javax.swing.JLabel();
        jLabelStorage = new javax.swing.JLabel();
        jLabelMemory = new javax.swing.JLabel();
        jTextFieldCpuModel = new javax.swing.JTextField();
        jTextFieldCpuCores = new javax.swing.JTextField();
        jTextFieldCpuFrequency = new javax.swing.JTextField();
        jLabelCpuModel = new javax.swing.JLabel();
        jLabelCpuCores = new javax.swing.JLabel();
        jLabelCpuFrequency = new javax.swing.JLabel();
        jTextFieldGpuModel = new javax.swing.JTextField();
        jTextFieldGpuMemory = new javax.swing.JTextField();
        jTextFieldGpuFrequency = new javax.swing.JTextField();
        jCheckBoxGpuIntegrated = new javax.swing.JCheckBox();
        jCheckBoxGpuDedicated = new javax.swing.JCheckBox();
        jLabelGpuModel = new javax.swing.JLabel();
        jLabelGpuMemory = new javax.swing.JLabel();
        jLabelGpuFrequency = new javax.swing.JLabel();
        jLabelGpuType = new javax.swing.JLabel();
        jCheckBoxTypeDeskTop = new javax.swing.JCheckBox();
        jCheckBoxTypeLaptop = new javax.swing.JCheckBox();
        jCheckBoxTypeServer = new javax.swing.JCheckBox();
        jCheckBoxOptionalsDisplay = new javax.swing.JCheckBox();
        jCheckBoxOptionalsCamera = new javax.swing.JCheckBox();
        jCheckBoxMouse = new javax.swing.JCheckBox();
        jCheckBoxKeyboard = new javax.swing.JCheckBox();
        jTextFieldDisplayInches = new javax.swing.JTextField();
        jTextFieldDisplayResolutionX = new javax.swing.JTextField();
        jTextFieldDisplayResolutionY = new javax.swing.JTextField();
        jLabelDisplayInches = new javax.swing.JLabel();
        jLabelDisplayResolutionX = new javax.swing.JLabel();
        jLabelDisplayResolutionY = new javax.swing.JLabel();
        jTextFieldCameraResolutionX = new javax.swing.JTextField();
        jTextFieldCameraResolutionY = new javax.swing.JTextField();
        jLabelCameraResolutionX = new javax.swing.JLabel();
        jLabelCameraResolutionY = new javax.swing.JLabel();
        jButtonSave = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabelTitleEssencial.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleEssencial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleEssencial.setText("Essencial");

        jLabelTitleCpu.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleCpu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleCpu.setText("CPU");

        jLabelTitleGpu.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleGpu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleGpu.setText("GPU");

        jLabelTitleType.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleType.setText("Tipo");

        jLabelTitleOptionals.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleOptionals.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleOptionals.setText("Opcionais");

        jLabelTitlePeripherals.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitlePeripherals.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitlePeripherals.setText("Periféricos");

        jLabelTitleDisplay.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleDisplay.setText("Display");

        jLabelTitleCamera.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleCamera.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleCamera.setText("Câmera");

        jLabelTitleRegister.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleRegister.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleRegister.setText("Cadastro");

        jTextFieldName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNameKeyPressed(evt);
            }
        });

        jTextFieldStorage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldStorageKeyPressed(evt);
            }
        });

        jTextFieldMemory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldMemoryKeyPressed(evt);
            }
        });

        jLabelName.setText("Nome");

        jLabelStorage.setText("Armazenamento");

        jLabelMemory.setText("Memória");

        jLabelCpuModel.setText("Modelo");

        jLabelCpuCores.setText("Núcleos");

        jLabelCpuFrequency.setText("Frequência");

        jCheckBoxGpuIntegrated.setText("Integrada");

        jCheckBoxGpuDedicated.setText("Dedicada");

        jLabelGpuModel.setText("Modelo");

        jLabelGpuMemory.setText("Memória");

        jLabelGpuFrequency.setText("Frequência");

        jLabelGpuType.setText("Tipo");

        jCheckBoxTypeDeskTop.setText("Desktop");
        jCheckBoxTypeDeskTop.setEnabled(false);

        jCheckBoxTypeLaptop.setText("Laptop");
        jCheckBoxTypeLaptop.setEnabled(false);

        jCheckBoxTypeServer.setText("Servidor");
        jCheckBoxTypeServer.setEnabled(false);

        jCheckBoxOptionalsDisplay.setText("Display");
        jCheckBoxOptionalsDisplay.setEnabled(false);

        jCheckBoxOptionalsCamera.setText("Câmera");
        jCheckBoxOptionalsCamera.setEnabled(false);

        jCheckBoxMouse.setText("Mouse");
        jCheckBoxMouse.setMaximumSize(new java.awt.Dimension(62, 20));
        jCheckBoxMouse.setMinimumSize(new java.awt.Dimension(62, 20));
        jCheckBoxMouse.setPreferredSize(new java.awt.Dimension(62, 20));

        jCheckBoxKeyboard.setText("Teclado");

        jTextFieldDisplayInches.setEnabled(false);

        jTextFieldDisplayResolutionX.setEnabled(false);

        jTextFieldDisplayResolutionY.setEnabled(false);

        jLabelDisplayInches.setText("Polegadas");

        jLabelDisplayResolutionX.setText("Resolução X");

        jLabelDisplayResolutionY.setText("Resolução Y");

        jTextFieldCameraResolutionX.setEnabled(false);

        jTextFieldCameraResolutionY.setEnabled(false);

        jLabelCameraResolutionX.setText("Resolução X");

        jLabelCameraResolutionY.setText("Resolução Y");

        jButtonSave.setText("Salvar");
        jButtonSave.setPreferredSize(new java.awt.Dimension(100, 23));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancelar");
        jButtonCancel.setPreferredSize(new java.awt.Dimension(100, 23));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTitleGpu)
                    .addComponent(jLabelTitleEssencial)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelStorage, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabelMemory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldMemory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(jTextFieldStorage, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldName, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jLabelTitleCpu)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelCpuCores, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabelCpuFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelCpuModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldCpuFrequency, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldCpuCores, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldCpuModel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabelGpuType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelGpuMemory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabelGpuFrequency, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelGpuModel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextFieldGpuFrequency, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldGpuMemory, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldGpuModel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBoxGpuDedicated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxGpuIntegrated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelTitleOptionals)
                            .addComponent(jLabelTitleType)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxOptionalsDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxOptionalsCamera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabelTitlePeripherals)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxMouse, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxKeyboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jCheckBoxTypeDeskTop, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxTypeServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)
                                .addComponent(jCheckBoxTypeLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTitleRegister)
                            .addComponent(jLabelTitleCamera)
                            .addComponent(jLabelTitleDisplay)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelDisplayResolutionX, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabelDisplayResolutionY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelDisplayInches, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldDisplayResolutionY, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldDisplayResolutionX, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldDisplayInches, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                    .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabelCameraResolutionY, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                        .addComponent(jLabelCameraResolutionX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jTextFieldCameraResolutionY, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextFieldCameraResolutionX, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTitleEssencial)
                            .addComponent(jLabelTitleType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTitleCpu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCpuModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCpuModel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCpuCores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCpuCores, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCpuFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCpuFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTitleGpu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldGpuModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelGpuModel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldGpuMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelGpuMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCheckBoxMouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBoxKeyboard)
                                .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldGpuFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelGpuFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelGpuType, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxGpuIntegrated)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBoxTypeDeskTop)
                                    .addComponent(jCheckBoxTypeLaptop))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxTypeServer)
                                .addGap(32, 32, 32)
                                .addComponent(jLabelTitleOptionals)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBoxOptionalsDisplay)
                                    .addComponent(jCheckBoxOptionalsCamera))
                                .addGap(58, 58, 58))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelTitleDisplay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldDisplayInches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelDisplayInches, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldDisplayResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelDisplayResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldDisplayResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelDisplayResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelTitleCamera)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldCameraResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelCameraResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldCameraResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelCameraResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTitlePeripherals)
                            .addComponent(jLabelTitleRegister))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxGpuDedicated)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveComputer();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTextFieldNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == java.awt.event.KeyEvent.VK_ENTER && jTextFieldName.hasFocus()) {jTextFieldStorage.requestFocusInWindow();}
    }//GEN-LAST:event_jTextFieldNameKeyPressed

    private void jTextFieldStorageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldStorageKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == java.awt.event.KeyEvent.VK_ENTER && jTextFieldStorage.hasFocus()) {jTextFieldMemory.requestFocusInWindow();}
    }//GEN-LAST:event_jTextFieldStorageKeyPressed

    private void jTextFieldMemoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMemoryKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == java.awt.event.KeyEvent.VK_ENTER && jTextFieldMemory.hasFocus()) {jTextFieldCpuModel.requestFocusInWindow();}
    }//GEN-LAST:event_jTextFieldMemoryKeyPressed

        // Dictates checkboxes behavior
    private void checkboxGuiHandleling() {

        // GPU - TYPE
        jCheckBoxGpuDedicated.addActionListener(e -> {
            boolean isSelected = jCheckBoxGpuDedicated.isSelected();
            jCheckBoxGpuIntegrated.setSelected(!isSelected);
        });
        jCheckBoxGpuIntegrated.addActionListener(e -> {
            boolean isSelected = jCheckBoxGpuIntegrated.isSelected();
            jCheckBoxGpuDedicated.setSelected(!isSelected);
        });
    }
    
    private void populate() {
        // Gets selected computer index and object
        int index = BDComputer.editIndex;
        Computer c = BDComputer.computers.get(index);

        // Essential fields
        jTextFieldName.setText(c.getName());
        jTextFieldStorage.setText(Integer.toString(c.getStorage()));
        jTextFieldMemory.setText(Integer.toString(c.getMemory()));

        // Essential fields: CPU fields
        jTextFieldCpuModel.setText(c.getCpu().getModel());
        jTextFieldCpuCores.setText(Integer.toString(c.getCpu().getCores()));
        jTextFieldCpuFrequency.setText(Integer.toString(c.getCpu().getFrequency()));

        // Essential fields: GPU fields
        jTextFieldGpuModel.setText(c.getGpu().getModel());
        jTextFieldGpuMemory.setText(Integer.toString(c.getGpu().getMemory()));
        jTextFieldGpuFrequency.setText(Integer.toString(c.getGpu().getFrequency()));
        switch(c.getGpu().getType()) {
            case "Dedicada" -> {jCheckBoxGpuDedicated.setSelected(true);  jCheckBoxGpuIntegrated.setSelected(false);}
            case "Integrada" -> {jCheckBoxGpuDedicated.setSelected(false); jCheckBoxGpuIntegrated.setSelected(true);}
        }

        // Type
        switch(c.getType()) {
            case "Desktop" -> {jCheckBoxTypeDeskTop.setSelected(true);  jCheckBoxTypeLaptop.setSelected(false);  jCheckBoxTypeServer.setSelected(false);}
            case "Laptop"   -> {jCheckBoxTypeDeskTop.setSelected(false); jCheckBoxTypeLaptop.setSelected(true);   jCheckBoxTypeServer.setSelected(false);}
            case "Servidor" -> {jCheckBoxTypeDeskTop.setSelected(false); jCheckBoxTypeLaptop.setSelected(false); jCheckBoxTypeServer.setSelected(true);}
        }

        // Optional fields: Camera
        if (c.getHasCamera()) {
            jCheckBoxOptionalsCamera.setSelected(true); // Set camera checkbox
            jTextFieldCameraResolutionX.setText(Integer.toString(c.getCamera().getResolutionX())); // Set camera resolution X
            jTextFieldCameraResolutionY.setText(Integer.toString(c.getCamera().getResolutionY())); // Set camera resolution Y
            jTextFieldCameraResolutionX.setEnabled(true); // Enable resolution inputs
            jTextFieldCameraResolutionY.setEnabled(true);
        } else {
            jCheckBoxOptionalsCamera.setSelected(false); // Unset camera checkbox
            jTextFieldCameraResolutionX.setText(""); // Clear resolution fields
            jTextFieldCameraResolutionY.setText("");
            jTextFieldCameraResolutionX.setEnabled(false); // Disable resolution inputs
            jTextFieldCameraResolutionY.setEnabled(false);
        }

        // Optional fields: Display
        if (c.getHasDisplay()) {
            jCheckBoxOptionalsDisplay.setSelected(true); // Set display checkbox
            jTextFieldDisplayInches.setText(Float.toString(c.getDisplay().getInches())); // Set display size
            jTextFieldDisplayResolutionX.setText(Integer.toString(c.getDisplay().getResolutionX())); // Set display resolution X
            jTextFieldDisplayResolutionY.setText(Integer.toString(c.getDisplay().getResolutionY())); // Set display resolution Y
            jTextFieldDisplayInches.setEnabled(true); // Enable display inputs
            jTextFieldDisplayResolutionX.setEnabled(true);
            jTextFieldDisplayResolutionY.setEnabled(true);
        } else {
            jCheckBoxOptionalsDisplay.setSelected(false); // Unset display checkbox
            jTextFieldDisplayInches.setText(""); // Clear display fields
            jTextFieldCameraResolutionX.setText(""); // Also clear camera fields
            jTextFieldCameraResolutionY.setText("");
            jTextFieldDisplayInches.setEnabled(false); // Disable display inputs
            jTextFieldDisplayResolutionX.setEnabled(false);
            jTextFieldDisplayResolutionY.setEnabled(false);
        }

        // Peripherals: Mouse and Keyboard
        jCheckBoxMouse.setSelected(c.getHasMouse()); // Set mouse checkbox based on availability
        jCheckBoxKeyboard.setSelected(c.getHasKeyboard()); // Set keyboard checkbox based on availability
    }

    private void saveComputer() {
        // Gets selected computer index and object
        int index = BDComputer.editIndex;
        Computer c = BDComputer.computers.get(index);

        // Essentials: Name
        try {
            c.setName(jTextFieldName.getText());
        }
        catch (SmallStringException e) {
            e.smallName();
            jTextFieldName.requestFocusInWindow();
            return;
        }
        catch (BigStringException e) {
            e.bigName();
            jTextFieldName.requestFocusInWindow();
            return;
        }

        // Essentials: Storage
        try {
            c.setStorage(Validate.validateInt(jTextFieldStorage.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeStorage();
            jTextFieldStorage.requestFocusInWindow();
            return;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldStorage.requestFocusInWindow();
            return;
        }

        // Essentials: Memory
        try {
            c.setMemory(Validate.validateInt(jTextFieldMemory.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeMemory();
            jTextFieldMemory.requestFocusInWindow();
            return;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldMemory.requestFocusInWindow();
            return;
        }

        // CPU: Model
        try {
            c.getCpu().setModel(jTextFieldCpuModel.getText());
        }
        catch (SmallStringException e) {
            e.smallModel();
            jTextFieldCpuModel.requestFocusInWindow();
            return;
        }
        catch (BigStringException e) {
            e.bigModel();
            jTextFieldCpuModel.requestFocusInWindow();
            return;
        }

        // CPU: Cores
        try {
            c.getCpu().setCores(Validate.validateInt(jTextFieldCpuCores.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeCores();
            jTextFieldCpuCores.requestFocusInWindow();
            return;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldCpuCores.requestFocusInWindow();
            return;
        }

        // CPU: Frequency
        try {
            c.getCpu().setFrequency(Validate.validateInt(jTextFieldCpuFrequency.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeFrequency();
            jTextFieldCpuFrequency.requestFocusInWindow();
            return;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldCpuFrequency.requestFocusInWindow();
            return;
        }

        // GPU: Model
        try {
            c.getGpu().setModel(jTextFieldGpuModel.getText());
        }
        catch (SmallStringException e) {
            e.smallModel();
            jTextFieldGpuModel.requestFocusInWindow();
            return;
        }
        catch (BigStringException e) {
            e.bigModel();
            jTextFieldGpuModel.requestFocusInWindow();
            return;
        }

        // GPU: Memory
        try {
            c.getGpu().setMemory(Validate.validateInt(jTextFieldGpuMemory.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeCores();
            jTextFieldGpuMemory.requestFocusInWindow();
            return;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldGpuMemory.requestFocusInWindow();
            return;
        }

        // GPU: Frequency
        try {
            c.getGpu().setFrequency(Validate.validateInt(jTextFieldGpuFrequency.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeFrequency();
            jTextFieldGpuFrequency.requestFocusInWindow();
            return;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldGpuFrequency.requestFocusInWindow();
            return;
        }

        // GPU: Type
        if (jCheckBoxGpuIntegrated.isSelected() && !jCheckBoxGpuDedicated.isSelected()){
            c.getGpu().setType("Integrada");
        } else if (!jCheckBoxGpuIntegrated.isSelected() &&  jCheckBoxGpuDedicated.isSelected()){
            c.getGpu().setType("Dedicada");
        } else {
            JOptionPane.showMessageDialog(
                null,
                "ATENÇÃO! Selecione um tipo de GPU.", 
                "Tipo de GPU inválido",
                JOptionPane.WARNING_MESSAGE
            );
            jTextFieldCpuModel.requestFocusInWindow();
            return;
        }

        // Peripherals: Set mouse and keyboard availability based on checkboxes
        c.setHasMouse(jCheckBoxMouse.isSelected());
        c.setHasKeyboard(jCheckBoxKeyboard.isSelected());

        // Close the form after saving
        this.dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSave;
    public static javax.swing.JCheckBox jCheckBoxGpuDedicated;
    public static javax.swing.JCheckBox jCheckBoxGpuIntegrated;
    public static javax.swing.JCheckBox jCheckBoxKeyboard;
    public static javax.swing.JCheckBox jCheckBoxMouse;
    private javax.swing.JCheckBox jCheckBoxOptionalsCamera;
    private javax.swing.JCheckBox jCheckBoxOptionalsDisplay;
    public static javax.swing.JCheckBox jCheckBoxTypeDeskTop;
    public static javax.swing.JCheckBox jCheckBoxTypeLaptop;
    public static javax.swing.JCheckBox jCheckBoxTypeServer;
    private javax.swing.JLabel jLabelCameraResolutionX;
    private javax.swing.JLabel jLabelCameraResolutionY;
    private javax.swing.JLabel jLabelCpuCores;
    private javax.swing.JLabel jLabelCpuFrequency;
    private javax.swing.JLabel jLabelCpuModel;
    private javax.swing.JLabel jLabelDisplayInches;
    private javax.swing.JLabel jLabelDisplayResolutionX;
    private javax.swing.JLabel jLabelDisplayResolutionY;
    private javax.swing.JLabel jLabelGpuFrequency;
    private javax.swing.JLabel jLabelGpuMemory;
    private javax.swing.JLabel jLabelGpuModel;
    private javax.swing.JLabel jLabelGpuType;
    private javax.swing.JLabel jLabelMemory;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelStorage;
    private javax.swing.JLabel jLabelTitleCamera;
    private javax.swing.JLabel jLabelTitleCpu;
    private javax.swing.JLabel jLabelTitleDisplay;
    private javax.swing.JLabel jLabelTitleEssencial;
    private javax.swing.JLabel jLabelTitleGpu;
    private javax.swing.JLabel jLabelTitleOptionals;
    private javax.swing.JLabel jLabelTitlePeripherals;
    private javax.swing.JLabel jLabelTitleRegister;
    private javax.swing.JLabel jLabelTitleType;
    public static javax.swing.JTextField jTextFieldCameraResolutionX;
    public static javax.swing.JTextField jTextFieldCameraResolutionY;
    public static javax.swing.JTextField jTextFieldCpuCores;
    public static javax.swing.JTextField jTextFieldCpuFrequency;
    public static javax.swing.JTextField jTextFieldCpuModel;
    public static javax.swing.JTextField jTextFieldDisplayInches;
    public static javax.swing.JTextField jTextFieldDisplayResolutionX;
    public static javax.swing.JTextField jTextFieldDisplayResolutionY;
    public static javax.swing.JTextField jTextFieldGpuFrequency;
    public static javax.swing.JTextField jTextFieldGpuMemory;
    public static javax.swing.JTextField jTextFieldGpuModel;
    public static javax.swing.JTextField jTextFieldMemory;
    public static javax.swing.JTextField jTextFieldName;
    public static javax.swing.JTextField jTextFieldStorage;
    // End of variables declaration//GEN-END:variables

}   
