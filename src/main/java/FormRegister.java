import javax.swing.JOptionPane;

public class FormRegister extends javax.swing.JFrame {
    
    // Creates new form 'FormRegister'
    private static FormRegister registerInstance;
    private FormRegister() {
        initComponents();
        setTitle("Cadastro de Computadores");
        setLocationRelativeTo(null);
        checkboxGuiHandleling();
    }
    public static FormRegister generateInstace() {
        if (registerInstance == null){
            registerInstance = new FormRegister();
        }
        return registerInstance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitleEssencial = new javax.swing.JLabel();
        jLabelTitleCpu = new javax.swing.JLabel();
        jLabelTitleGpu = new javax.swing.JLabel();
        jLabelTitleType = new javax.swing.JLabel();
        jLabelTitleOptionals = new javax.swing.JLabel();
        jLabelTitlePeripherals = new javax.swing.JLabel();
        jLabelTitleDisplay = new javax.swing.JLabel();
        jLabelTitleCamera = new javax.swing.JLabel();
        jLabelTitleRegister = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldStorage = new javax.swing.JTextField();
        jTextFieldMemory = new javax.swing.JTextField();
        jLabelName = new javax.swing.JLabel();
        jLabelStorage = new javax.swing.JLabel();
        jLabelMemory = new javax.swing.JLabel();
        jTextFieldCpuModel = new javax.swing.JTextField();
        jTextFieldCpuCores = new javax.swing.JTextField();
        jTextFieldCpuFrequency = new javax.swing.JTextField();
        jLabelCpuModel = new javax.swing.JLabel();
        jLabelCpuCores = new javax.swing.JLabel();
        jLabelCpuFrequency = new javax.swing.JLabel();
        jTextFieldGpuModel = new javax.swing.JTextField();
        jTextFieldGpuMemory = new javax.swing.JTextField();
        jTextFieldGpuFrequency = new javax.swing.JTextField();
        jCheckBoxGpuIntegrated = new javax.swing.JCheckBox();
        jCheckBoxGpuDedicated = new javax.swing.JCheckBox();
        jLabelGpuModel = new javax.swing.JLabel();
        jLabelGpuMemory = new javax.swing.JLabel();
        jLabelGpuFrequency = new javax.swing.JLabel();
        jLabelGpuType = new javax.swing.JLabel();
        jCheckBoxTypeDeskTop = new javax.swing.JCheckBox();
        jCheckBoxTypeLaptop = new javax.swing.JCheckBox();
        jCheckBoxTypeServer = new javax.swing.JCheckBox();
        jCheckBoxOptionalsDisplay = new javax.swing.JCheckBox();
        jCheckBoxOptionalsCamera = new javax.swing.JCheckBox();
        jCheckBoxMouse = new javax.swing.JCheckBox();
        jCheckBoxKeyboard = new javax.swing.JCheckBox();
        jTextFieldDisplayInches = new javax.swing.JTextField();
        jTextFieldDisplayResolutionX = new javax.swing.JTextField();
        jTextFieldDisplayResolutionY = new javax.swing.JTextField();
        jLabelDisplayInches = new javax.swing.JLabel();
        jLabelDisplayResolutionX = new javax.swing.JLabel();
        jLabelDisplayResolutionY = new javax.swing.JLabel();
        jTextFieldCameraResolutionX = new javax.swing.JTextField();
        jTextFieldCameraResolutionY = new javax.swing.JTextField();
        jLabelCameraResolutionX = new javax.swing.JLabel();
        jLabelCameraResolutionY = new javax.swing.JLabel();
        jButtonRegister = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabelTitleEssencial.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleEssencial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleEssencial.setText("Essencial");

        jLabelTitleCpu.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleCpu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleCpu.setText("CPU");

        jLabelTitleGpu.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleGpu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleGpu.setText("GPU");

        jLabelTitleType.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleType.setText("Tipo");

        jLabelTitleOptionals.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleOptionals.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleOptionals.setText("Opcionais");

        jLabelTitlePeripherals.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitlePeripherals.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitlePeripherals.setText("Periféricos");

        jLabelTitleDisplay.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleDisplay.setText("Display");

        jLabelTitleCamera.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleCamera.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleCamera.setText("Câmera");

        jLabelTitleRegister.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTitleRegister.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitleRegister.setText("Cadastro");

        jLabelName.setText("Nome");

        jLabelStorage.setText("Armazenamento");

        jLabelMemory.setText("Memória");

        jLabelCpuModel.setText("Modelo");

        jLabelCpuCores.setText("Núcleos");

        jLabelCpuFrequency.setText("Frequência");

        jCheckBoxGpuIntegrated.setText("Integrada");

        jCheckBoxGpuDedicated.setText("Dedicada");

        jLabelGpuModel.setText("Modelo");

        jLabelGpuMemory.setText("Memória");

        jLabelGpuFrequency.setText("Frequência");

        jLabelGpuType.setText("Tipo");

        jCheckBoxTypeDeskTop.setText("Desktop");

        jCheckBoxTypeLaptop.setText("Laptop");

        jCheckBoxTypeServer.setText("Servidor");

        jCheckBoxOptionalsDisplay.setText("Display");

        jCheckBoxOptionalsCamera.setText("Câmera");

        jCheckBoxMouse.setText("Mouse");
        jCheckBoxMouse.setMaximumSize(new java.awt.Dimension(62, 20));
        jCheckBoxMouse.setMinimumSize(new java.awt.Dimension(62, 20));
        jCheckBoxMouse.setPreferredSize(new java.awt.Dimension(62, 20));

        jCheckBoxKeyboard.setText("Teclado");

        jTextFieldDisplayInches.setEnabled(false);

        jTextFieldDisplayResolutionX.setEnabled(false);

        jTextFieldDisplayResolutionY.setEnabled(false);

        jLabelDisplayInches.setText("Polegadas");

        jLabelDisplayResolutionX.setText("Resolução X");

        jLabelDisplayResolutionY.setText("Resolução Y");

        jTextFieldCameraResolutionX.setEnabled(false);

        jTextFieldCameraResolutionY.setEnabled(false);

        jLabelCameraResolutionX.setText("Resolução X");

        jLabelCameraResolutionY.setText("Resolução Y");

        jButtonRegister.setText("Cadastrar");
        jButtonRegister.setPreferredSize(new java.awt.Dimension(100, 23));
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });

        jButtonClear.setText("Limpar");
        jButtonClear.setPreferredSize(new java.awt.Dimension(100, 23));
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTitleGpu)
                    .addComponent(jLabelTitleEssencial)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelStorage, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabelMemory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldMemory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(jTextFieldStorage, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldName, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jLabelTitleCpu)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelCpuCores, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabelCpuFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelCpuModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldCpuFrequency, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldCpuCores, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldCpuModel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabelGpuType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelGpuMemory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabelGpuFrequency, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelGpuModel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextFieldGpuFrequency, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldGpuMemory, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldGpuModel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBoxGpuDedicated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxGpuIntegrated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelTitleOptionals)
                            .addComponent(jLabelTitleType)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxOptionalsDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxOptionalsCamera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabelTitlePeripherals)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxMouse, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxKeyboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jCheckBoxTypeDeskTop, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxTypeServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)
                                .addComponent(jCheckBoxTypeLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTitleRegister)
                            .addComponent(jLabelTitleCamera)
                            .addComponent(jLabelTitleDisplay)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelDisplayResolutionX, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jLabelDisplayResolutionY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelDisplayInches, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldDisplayResolutionY, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldDisplayResolutionX, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldDisplayInches, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                    .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabelCameraResolutionY, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                        .addComponent(jLabelCameraResolutionX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jTextFieldCameraResolutionY, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextFieldCameraResolutionX, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTitleEssencial)
                            .addComponent(jLabelTitleType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTitleCpu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCpuModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCpuModel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCpuCores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCpuCores, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCpuFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCpuFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTitleGpu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldGpuModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelGpuModel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldGpuMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelGpuMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCheckBoxMouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBoxKeyboard)
                                .addComponent(jButtonRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldGpuFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelGpuFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelGpuType, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxGpuIntegrated)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBoxTypeDeskTop)
                                    .addComponent(jCheckBoxTypeLaptop))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxTypeServer)
                                .addGap(32, 32, 32)
                                .addComponent(jLabelTitleOptionals)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBoxOptionalsDisplay)
                                    .addComponent(jCheckBoxOptionalsCamera))
                                .addGap(58, 58, 58))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelTitleDisplay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldDisplayInches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelDisplayInches, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldDisplayResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelDisplayResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldDisplayResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelDisplayResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelTitleCamera)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldCameraResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelCameraResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldCameraResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelCameraResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTitlePeripherals)
                            .addComponent(jLabelTitleRegister))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxGpuDedicated)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        clear(0);
        checkboxGuiHandleling();
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterActionPerformed
        // OBJECT TYPE
        if (jCheckBoxTypeLaptop.isSelected() && !jCheckBoxTypeDeskTop.isSelected() && !jCheckBoxTypeServer.isSelected()){
            Laptop laptop = createLaptop(new Laptop());
            if (laptop != null) {
                BDComputer.computers.add(laptop);
                clear(1);
            }
        } else if (!jCheckBoxTypeLaptop.isSelected() && jCheckBoxTypeDeskTop.isSelected() && !jCheckBoxTypeServer.isSelected()){
            DeskTop desktop = createDeskTop(new DeskTop());
            if (desktop != null) {
                BDComputer.computers.add(desktop);
                clear(1);
            }
        } else if (!jCheckBoxTypeLaptop.isSelected() && !jCheckBoxTypeDeskTop.isSelected() && jCheckBoxTypeServer.isSelected()){
            Server server = createServer(new Server());
            if (server != null) {
                BDComputer.computers.add(server);
                clear(1);
            }
        } else {
            JOptionPane.showMessageDialog(
                null,
               "ATENÇÃO! Selecione um tipo de computador.",
                "Tipo de computador inválido",
                JOptionPane.WARNING_MESSAGE
            );
            jCheckBoxTypeLaptop.requestFocusInWindow();
        }
        
    }//GEN-LAST:event_jButtonRegisterActionPerformed

    // Dictates checkboxes behavior
    private void checkboxGuiHandleling() {

        // GPU - TYPE
        jCheckBoxGpuDedicated.addActionListener(e -> {
            boolean isSelected = jCheckBoxGpuDedicated.isSelected();
            jCheckBoxGpuIntegrated.setSelected(!isSelected);
        });
        jCheckBoxGpuIntegrated.addActionListener(e -> {
            boolean isSelected = jCheckBoxGpuIntegrated.isSelected();
            jCheckBoxGpuDedicated.setSelected(!isSelected);
        });

        // TYPE - SERVER
        jCheckBoxTypeServer.addActionListener(e -> {
            boolean isSelected = jCheckBoxTypeServer.isSelected();

            // Disable optionals and peripherals for Server type
            jCheckBoxOptionalsDisplay.setEnabled(!isSelected);
            jCheckBoxOptionalsCamera.setEnabled(!isSelected);
            jCheckBoxOptionalsDisplay.setSelected(false);
            jCheckBoxOptionalsCamera.setSelected(false);
            jCheckBoxMouse.setEnabled(!isSelected);
            jCheckBoxKeyboard.setEnabled(!isSelected);
            jCheckBoxMouse.setSelected(false);
            jCheckBoxKeyboard.setSelected(false);

            if (isSelected) {
                // Unselect other types and disable display fields
                jCheckBoxTypeLaptop.setSelected(false);
                jCheckBoxTypeDeskTop.setSelected(false);
                jTextFieldDisplayInches.setEnabled(false);
                jTextFieldDisplayResolutionX.setEnabled(false);
                jTextFieldDisplayResolutionY.setEnabled(false);
                jTextFieldDisplayInches.setText("");
                jTextFieldDisplayResolutionX.setText("");
                jTextFieldDisplayResolutionY.setText("");
            }

            // Disable camera fields for Server type
            if (jCheckBoxTypeServer.isSelected()) {
                jTextFieldCameraResolutionX.setEnabled(false);
                jTextFieldCameraResolutionY.setEnabled(false);
                jTextFieldCameraResolutionX.setText("");
                jTextFieldCameraResolutionY.setText("");
            }
        });
        
        // OPTIONALS - DISPLAY
        jCheckBoxOptionalsDisplay.addActionListener(e -> {
            boolean isSelected = jCheckBoxOptionalsDisplay.isSelected();
            // Enable display fields if selected, otherwise clear them
            jTextFieldDisplayInches.setEnabled(isSelected);
            jTextFieldDisplayResolutionX.setEnabled(isSelected);
            jTextFieldDisplayResolutionY.setEnabled(isSelected);
            if (!isSelected) {
                jTextFieldDisplayInches.setText("");
                jTextFieldDisplayResolutionX.setText("");
                jTextFieldDisplayResolutionY.setText("");
            }
        });

        // OPTIONALS - CAMERA
        jCheckBoxOptionalsCamera.addActionListener(e -> {
            boolean isSelected = jCheckBoxOptionalsCamera.isSelected();
            // Enable camera fields if selected, otherwise clear them
            jTextFieldCameraResolutionX.setEnabled(isSelected);
            jTextFieldCameraResolutionY.setEnabled(isSelected);
            if (!isSelected) {
                jTextFieldCameraResolutionX.setText("");
                jTextFieldCameraResolutionY.setText("");
            }
        });

        // TYPE - SERVER
        jCheckBoxTypeServer.addActionListener(e -> {
            boolean isSelected = jCheckBoxTypeServer.isSelected();

            // Disable optionals and peripherals for Server type
            jCheckBoxOptionalsDisplay.setEnabled(!isSelected);
            jCheckBoxOptionalsCamera.setEnabled(!isSelected);
            jCheckBoxOptionalsDisplay.setSelected(false);
            jCheckBoxOptionalsCamera.setSelected(false);
            jCheckBoxMouse.setEnabled(!isSelected);
            jCheckBoxKeyboard.setEnabled(!isSelected);
            jCheckBoxMouse.setSelected(false);
            jCheckBoxKeyboard.setSelected(false);

            if (isSelected) {
                // Unselect other types and disable display fields
                jCheckBoxTypeLaptop.setSelected(false);
                jCheckBoxTypeDeskTop.setSelected(false);
                jTextFieldDisplayInches.setEnabled(false);
                jTextFieldDisplayResolutionX.setEnabled(false);
                jTextFieldDisplayResolutionY.setEnabled(false);
                jTextFieldDisplayInches.setText("");
                jTextFieldDisplayResolutionX.setText("");
                jTextFieldDisplayResolutionY.setText("");
            }

            // Disable camera fields for Server type
            if (jCheckBoxTypeServer.isSelected()) {
                jTextFieldCameraResolutionX.setEnabled(false);
                jTextFieldCameraResolutionY.setEnabled(false);
                jTextFieldCameraResolutionX.setText("");
                jTextFieldCameraResolutionY.setText("");
            }
        });

        // TYPE - LAPTOP
        jCheckBoxTypeLaptop.addActionListener(e -> {
            boolean isSelected = jCheckBoxTypeLaptop.isSelected();

            // Enable optional display and keyboard fields for Laptop type
            jCheckBoxOptionalsDisplay.setEnabled(!isSelected);
            jCheckBoxOptionalsDisplay.setSelected(true);
            jCheckBoxKeyboard.setEnabled(!isSelected);
            jCheckBoxKeyboard.setSelected(true);

            if (isSelected) {
                // Enable camera and mouse checkboxes, and display fields
                jCheckBoxOptionalsCamera.setEnabled(true);
                jCheckBoxMouse.setEnabled(true);
                jCheckBoxTypeServer.setSelected(false);
                jCheckBoxTypeDeskTop.setSelected(false);
                jTextFieldDisplayInches.setEnabled(true);
                jTextFieldDisplayResolutionX.setEnabled(true);
                jTextFieldDisplayResolutionY.setEnabled(true);
            }
        });

        // TYPE - DESKTOP
        jCheckBoxTypeDeskTop.addActionListener(e -> {
            boolean isSelected = jCheckBoxTypeDeskTop.isSelected();

            if (isSelected) {
                // Unselect other types and enable optionals and peripherals for Desktop
                jCheckBoxTypeServer.setSelected(false);
                jCheckBoxTypeLaptop.setSelected(false);
                jCheckBoxOptionalsDisplay.setEnabled(true);
                jCheckBoxOptionalsCamera.setEnabled(true);
                jCheckBoxMouse.setEnabled(true);
                jCheckBoxKeyboard.setEnabled(true);
            }
        });

    }

    // Clears form inputs
    private void clear(int message) {

        if (message == 0) {
            int ret = JOptionPane.showConfirmDialog(
                null,
                "Deseja realmente limpar o formulário?", // Confirmation prompt
                "Limpar Formulário", // Title
                JOptionPane.YES_NO_OPTION
            );

            if (ret == 0) {
                // Clear all form fields
                jTextFieldName.setText("");
                jTextFieldStorage.setText("");
                jTextFieldMemory.setText("");
                jTextFieldCpuModel.setText("");
                jTextFieldCpuCores.setText("");
                jTextFieldCpuFrequency.setText("");
                jTextFieldGpuModel.setText("");
                jTextFieldGpuMemory.setText("");
                jTextFieldGpuFrequency.setText("");
                jTextFieldDisplayInches.setText("");
                jTextFieldDisplayResolutionX.setText("");
                jTextFieldDisplayResolutionY.setText("");
                jTextFieldCameraResolutionX.setText("");
                jTextFieldCameraResolutionY.setText("");
            }
        }
        if (message == 1) {
            // Show success message and reset fields after submission
            JOptionPane.showMessageDialog(
                null,
                "Computador cadastrado com sucesso", // Success message
                "Operação realizada", // Title
                JOptionPane.PLAIN_MESSAGE
            );
            jTextFieldName.setText("");
            jTextFieldStorage.setText("");
            jTextFieldMemory.setText("");
            jTextFieldCpuModel.setText("");
            jTextFieldCpuCores.setText("");
            jTextFieldCpuFrequency.setText("");
            jTextFieldGpuModel.setText("");
            jTextFieldGpuMemory.setText("");
            jTextFieldGpuFrequency.setText("");
            jTextFieldDisplayInches.setText("");
            jTextFieldDisplayResolutionX.setText("");
            jTextFieldDisplayResolutionY.setText("");
            jTextFieldCameraResolutionX.setText("");
            jTextFieldCameraResolutionY.setText("");
        }
    }
    
    private Laptop createLaptop(Laptop laptop) {

        // ESSENTIALS
        // type
        laptop.setType("Laptop");
        
        // Name
        try {
            laptop.setName(jTextFieldName.getText());
        }
        catch (SmallStringException e) {
            e.smallName();
            jTextFieldName.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigName();
            jTextFieldName.requestFocusInWindow();
            return null;
        }
        // Storage
        try {
            laptop.setStorage(Validate.validateInt(jTextFieldStorage.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeStorage();
            jTextFieldStorage.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldStorage.requestFocusInWindow();
            return null;
        }
        // Memory
        try {
            laptop.setMemory(Validate.validateInt(jTextFieldMemory.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeMemory();
            jTextFieldMemory.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldMemory.requestFocusInWindow();
            return null;
        }
        
        // CPU
        // Model
        try {
            laptop.getCpu().setModel(jTextFieldCpuModel.getText());
        }
        catch (SmallStringException e) {
            e.smallModel();
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigModel();
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        // Cores
        try {
            laptop.getCpu().setCores(Validate.validateInt(jTextFieldCpuCores.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeCores();
            jTextFieldCpuCores.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldCpuCores.requestFocusInWindow();
            return null;
        }
        // Frequency
        try {
            laptop.getCpu().setFrequency(Validate.validateInt(jTextFieldCpuFrequency.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeFrequency();
            jTextFieldCpuFrequency.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldCpuFrequency.requestFocusInWindow();
            return null;
        }
        
        // GPU
        // Model
        try {
            laptop.getGpu().setModel(jTextFieldGpuModel.getText());
        }
        catch (SmallStringException e) {
            e.smallModel();
            jTextFieldGpuModel.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigModel();
            jTextFieldGpuModel.requestFocusInWindow();
            return null;
        }
        // Memory
        try {
            laptop.getGpu().setMemory(Validate.validateInt(jTextFieldGpuMemory.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeCores();
            jTextFieldGpuMemory.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldGpuMemory.requestFocusInWindow();
            return null;
        }
        // Frequency
        try {
            laptop.getGpu().setFrequency(Validate.validateInt(jTextFieldGpuFrequency.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeFrequency();
            jTextFieldGpuFrequency.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldGpuFrequency.requestFocusInWindow();
            return null;
        }
        // Type
        if (jCheckBoxGpuIntegrated.isSelected() && !jCheckBoxGpuDedicated.isSelected()){
            laptop.getGpu().setType("Integrada");
        } else if (!jCheckBoxGpuIntegrated.isSelected() &&  jCheckBoxGpuDedicated.isSelected()){
            laptop.getGpu().setType("Dedicada");
        } else {
            JOptionPane.showMessageDialog(
                null,
               "ATENÇÃO! Selecione um tipo de GPU.",
                "Tipo de GPU inválido",
                JOptionPane.WARNING_MESSAGE
            );
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        
        // DISPLAY
        laptop.setHasDisplay(jCheckBoxOptionalsDisplay.isSelected());
        if (jCheckBoxOptionalsDisplay.isSelected()) {
            // Inches
            try {
                laptop.getDisplay().setInches(Validate.validateFloat(jTextFieldDisplayInches.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeInches();
                jTextFieldDisplayInches.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidFloat();
                jTextFieldDisplayInches.requestFocusInWindow();
                return null;
            }
            // Resolution X
            try {
                laptop.getDisplay().setResolutionX(Validate.validateInt(jTextFieldDisplayResolutionX.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeResolution();
                jTextFieldDisplayResolutionX.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidInteger();
                jTextFieldDisplayResolutionX.requestFocusInWindow();
                return null;
            }
            // Resolution Y
            try {
                laptop.getDisplay().setResolutionY(Validate.validateInt(jTextFieldDisplayResolutionY.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeResolution();
                jTextFieldDisplayResolutionY.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidInteger();
                jTextFieldDisplayResolutionY.requestFocusInWindow();
                return null;
            }
        }

        // CAMERA
        laptop.setHasCamera(jCheckBoxOptionalsCamera.isSelected());
        if (jCheckBoxOptionalsCamera.isSelected()) {
            // Resolution X
            try {
                laptop.getCamera().setResolutionX(Validate.validateInt(jTextFieldCameraResolutionX.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeResolution();
                jTextFieldCameraResolutionX.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidInteger();
                jTextFieldCameraResolutionX.requestFocusInWindow();
                return null;
            }
            // Resolution Y
            try {
                laptop.getCamera().setResolutionY(Validate.validateInt(jTextFieldCameraResolutionY.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeResolution();
                jTextFieldCameraResolutionY.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidInteger();
                jTextFieldCameraResolutionY.requestFocusInWindow();
                return null;
            }
        }
        
        // PERIPHERALS
        laptop.setHasMouse(jCheckBoxMouse.isSelected());
        laptop.setHasKeyboard(jCheckBoxKeyboard.isSelected());
        
        return laptop;
    }
    
    private DeskTop createDeskTop(DeskTop desktop) {

        // ESSENTIALS
        // type
        desktop.setType("Desktop");
        
        // Name
        try {
            desktop.setName(jTextFieldName.getText());
        }
        catch (SmallStringException e) {
            e.smallName();
            jTextFieldName.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigName();
            jTextFieldName.requestFocusInWindow();
            return null;
        }
        // Storage
        try {
            desktop.setStorage(Validate.validateInt(jTextFieldStorage.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeStorage();
            jTextFieldStorage.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldStorage.requestFocusInWindow();
            return null;
        }
        // Memory
        try {
            desktop.setMemory(Validate.validateInt(jTextFieldMemory.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeMemory();
            jTextFieldMemory.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldMemory.requestFocusInWindow();
            return null;
        }
        
        // CPU
        // Model
        try {
            desktop.getCpu().setModel(jTextFieldCpuModel.getText());
        }
        catch (SmallStringException e) {
            e.smallModel();
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigModel();
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        // Cores
        try {
            desktop.getCpu().setCores(Validate.validateInt(jTextFieldCpuCores.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeCores();
            jTextFieldCpuCores.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldCpuCores.requestFocusInWindow();
            return null;
        }
        // Frequency
        try {
            desktop.getCpu().setFrequency(Validate.validateInt(jTextFieldCpuFrequency.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeFrequency();
            jTextFieldCpuFrequency.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldCpuFrequency.requestFocusInWindow();
            return null;
        }
        
        // GPU
        // Model
        try {
            desktop.getGpu().setModel(jTextFieldGpuModel.getText());
        }
        catch (SmallStringException e) {
            e.smallModel();
            jTextFieldGpuModel.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigModel();
            jTextFieldGpuModel.requestFocusInWindow();
            return null;
        }
        // Memory
        try {
            desktop.getGpu().setMemory(Validate.validateInt(jTextFieldGpuMemory.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeCores();
            jTextFieldGpuMemory.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldGpuMemory.requestFocusInWindow();
            return null;
        }
        // Frequency
        try {
            desktop.getGpu().setFrequency(Validate.validateInt(jTextFieldGpuFrequency.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeFrequency();
            jTextFieldGpuFrequency.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldGpuFrequency.requestFocusInWindow();
            return null;
        }
        // Type
        if (jCheckBoxGpuIntegrated.isSelected() && !jCheckBoxGpuDedicated.isSelected()){
            desktop.getGpu().setType("Integrada");
        }else if (!jCheckBoxGpuIntegrated.isSelected() &&  jCheckBoxGpuDedicated.isSelected()){
            desktop.getGpu().setType("Dedicada");
        } else {
            JOptionPane.showMessageDialog(
                null,
               "ATENÇÃO! Selecione um tipo de GPU.",
                "Tipo de GPU inválido",
                JOptionPane.WARNING_MESSAGE
            );
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        
        // DISPLAY
        desktop.setHasDisplay(jCheckBoxOptionalsDisplay.isSelected());
        if (jCheckBoxOptionalsDisplay.isSelected()) {
            // Inches
            try {
                desktop.getDisplay().setInches(Validate.validateFloat(jTextFieldDisplayInches.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeInches();
                jTextFieldDisplayInches.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidFloat();
                jTextFieldDisplayInches.requestFocusInWindow();
                return null;
            }
            // Resolution X
            try {
                desktop.getDisplay().setResolutionX(Validate.validateInt(jTextFieldDisplayResolutionX.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeResolution();
                jTextFieldDisplayResolutionX.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidInteger();
                jTextFieldDisplayResolutionX.requestFocusInWindow();
                return null;
            }
            // Resolution Y
            try {
                desktop.getDisplay().setResolutionY(Validate.validateInt(jTextFieldDisplayResolutionY.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeResolution();
                jTextFieldDisplayResolutionY.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidInteger();
                jTextFieldDisplayResolutionY.requestFocusInWindow();
                return null;
            }
        }

        // CAMERA
        desktop.setHasCamera(jCheckBoxOptionalsCamera.isSelected());
        if (jCheckBoxOptionalsCamera.isSelected()) {
            // Resolution X
            try {
                desktop.getCamera().setResolutionX(Validate.validateInt(jTextFieldCameraResolutionX.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeResolution();
                jTextFieldCameraResolutionX.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidInteger();
                jTextFieldCameraResolutionX.requestFocusInWindow();
                return null;
            }
            // Resolution Y
            try {
                desktop.getCamera().setResolutionY(Validate.validateInt(jTextFieldCameraResolutionY.getText()));
            }
            catch(NegativeNumberException e) {
                e.negativeResolution();
                jTextFieldCameraResolutionY.requestFocusInWindow();
                return null;
            }
            catch(ScannerFormatException e) {
                e.scannerInvalidInteger();
                jTextFieldCameraResolutionY.requestFocusInWindow();
                return null;
            }
        }
        
        // PERIPHERALS
        desktop.setHasMouse(jCheckBoxMouse.isSelected());
        desktop.setHasKeyboard(jCheckBoxKeyboard.isSelected());
        
        return desktop;
    }
    
    private Server createServer(Server server) {

        // ESSENTIALS
        // type
        server.setType("Servidor");
        
        // Name
        try {
            server.setName(jTextFieldName.getText());
        }
        catch (SmallStringException e) {
            e.smallName();
            jTextFieldName.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigName();
            jTextFieldName.requestFocusInWindow();
            return null;
        }
        // Storage
        try {
            server.setStorage(Validate.validateInt(jTextFieldStorage.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeStorage();
            jTextFieldStorage.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldStorage.requestFocusInWindow();
            return null;
        }
        // Memory
        try {
            server.setMemory(Validate.validateInt(jTextFieldMemory.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeMemory();
            jTextFieldMemory.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldMemory.requestFocusInWindow();
            return null;
        }
        
        // CPU
        // Model
        try {
            server.getCpu().setModel(jTextFieldCpuModel.getText());
        }
        catch (SmallStringException e) {
            e.smallModel();
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigModel();
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        // Cores
        try {
            server.getCpu().setCores(Validate.validateInt(jTextFieldCpuCores.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeCores();
            jTextFieldCpuCores.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldCpuCores.requestFocusInWindow();
            return null;
        }
        // Frequency
        try {
            server.getCpu().setFrequency(Validate.validateInt(jTextFieldCpuFrequency.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeFrequency();
            jTextFieldCpuFrequency.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldCpuFrequency.requestFocusInWindow();
            return null;
        }
        
        // GPU
        // Model
        try {
            server.getGpu().setModel(jTextFieldGpuModel.getText());
        }
        catch (SmallStringException e) {
            e.smallModel();
            jTextFieldGpuModel.requestFocusInWindow();
            return null;
        }
        catch (BigStringException e) {
            e.bigModel();
            jTextFieldGpuModel.requestFocusInWindow();
            return null;
        }
        // Memory
        try {
            server.getGpu().setMemory(Validate.validateInt(jTextFieldGpuMemory.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeCores();
            jTextFieldGpuMemory.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldGpuMemory.requestFocusInWindow();
            return null;
        }
        // Frequency
        try {
            server.getGpu().setFrequency(Validate.validateInt(jTextFieldGpuFrequency.getText()));
        }
        catch(NegativeNumberException e) {
            e.negativeFrequency();
            jTextFieldGpuFrequency.requestFocusInWindow();
            return null;
        }
        catch(ScannerFormatException e) {
            e.scannerInvalidInteger();
            jTextFieldGpuFrequency.requestFocusInWindow();
            return null;
        }
        // Type
        if (jCheckBoxGpuIntegrated.isSelected() && !jCheckBoxGpuDedicated.isSelected()){
            server.getGpu().setType("Integrada");
        }else if (!jCheckBoxGpuIntegrated.isSelected() &&  jCheckBoxGpuDedicated.isSelected()){
            server.getGpu().setType("Dedicada");
        } else {
            JOptionPane.showMessageDialog(
                null,
               "ATENÇÃO! Selecione um tipo de GPU.",
                "Tipo de GPU inválido",
                JOptionPane.WARNING_MESSAGE
            );
            jTextFieldCpuModel.requestFocusInWindow();
            return null;
        }
        
        return server;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonRegister;
    public static javax.swing.JCheckBox jCheckBoxGpuDedicated;
    public static javax.swing.JCheckBox jCheckBoxGpuIntegrated;
    public static javax.swing.JCheckBox jCheckBoxKeyboard;
    public static javax.swing.JCheckBox jCheckBoxMouse;
    private javax.swing.JCheckBox jCheckBoxOptionalsCamera;
    private javax.swing.JCheckBox jCheckBoxOptionalsDisplay;
    public static javax.swing.JCheckBox jCheckBoxTypeDeskTop;
    public static javax.swing.JCheckBox jCheckBoxTypeLaptop;
    public static javax.swing.JCheckBox jCheckBoxTypeServer;
    private javax.swing.JLabel jLabelCameraResolutionX;
    private javax.swing.JLabel jLabelCameraResolutionY;
    private javax.swing.JLabel jLabelCpuCores;
    private javax.swing.JLabel jLabelCpuFrequency;
    private javax.swing.JLabel jLabelCpuModel;
    private javax.swing.JLabel jLabelDisplayInches;
    private javax.swing.JLabel jLabelDisplayResolutionX;
    private javax.swing.JLabel jLabelDisplayResolutionY;
    private javax.swing.JLabel jLabelGpuFrequency;
    private javax.swing.JLabel jLabelGpuMemory;
    private javax.swing.JLabel jLabelGpuModel;
    private javax.swing.JLabel jLabelGpuType;
    private javax.swing.JLabel jLabelMemory;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelStorage;
    private javax.swing.JLabel jLabelTitleCamera;
    private javax.swing.JLabel jLabelTitleCpu;
    private javax.swing.JLabel jLabelTitleDisplay;
    private javax.swing.JLabel jLabelTitleEssencial;
    private javax.swing.JLabel jLabelTitleGpu;
    private javax.swing.JLabel jLabelTitleOptionals;
    private javax.swing.JLabel jLabelTitlePeripherals;
    private javax.swing.JLabel jLabelTitleRegister;
    private javax.swing.JLabel jLabelTitleType;
    public static javax.swing.JTextField jTextFieldCameraResolutionX;
    public static javax.swing.JTextField jTextFieldCameraResolutionY;
    public static javax.swing.JTextField jTextFieldCpuCores;
    public static javax.swing.JTextField jTextFieldCpuFrequency;
    public static javax.swing.JTextField jTextFieldCpuModel;
    public static javax.swing.JTextField jTextFieldDisplayInches;
    public static javax.swing.JTextField jTextFieldDisplayResolutionX;
    public static javax.swing.JTextField jTextFieldDisplayResolutionY;
    public static javax.swing.JTextField jTextFieldGpuFrequency;
    public static javax.swing.JTextField jTextFieldGpuMemory;
    public static javax.swing.JTextField jTextFieldGpuModel;
    public static javax.swing.JTextField jTextFieldMemory;
    public static javax.swing.JTextField jTextFieldName;
    public static javax.swing.JTextField jTextFieldStorage;
    // End of variables declaration//GEN-END:variables

}   
